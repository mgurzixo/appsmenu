#!/usr/bin/env python
# Author: Lu Xu <oliver_lew at outlook dot com>
# License: MIT
# References: https://specifications.freedesktop.org/desktop-entry-spec
#             https://specifications.freedesktop.org/icon-theme-spec

import os
import argparse
import shlex
import shutil
from subprocess import run, PIPE, DEVNULL, Popen

# XDG directories
HOME = os.getenv("HOME")
XDG_DATA_HOME = os.getenv("XDG_DATA_HOME", f"{HOME}/.local/share")
XDG_DATA_DIRS = os.getenv("XDG_DATA_DIRS", "/usr/share:/usr/local/share").split(":")
DATA_DIRS = [*XDG_DATA_DIRS, XDG_DATA_HOME]
XDG_CURRENT_DESKTOP = os.getenv('XDG_CURRENT_DESKTOP', '')

# XDG category to better names
xdg_categories = {
    "AudioVideo": "Multimedia",
    "Audio": "Multimedia",
    "Video": "Multimedia",
    "Development": "Development",
    "Education": "Education",
    "Game": "Games",
    "Graphics": "Graphics",
    "Network": "Internet",
    "Office": "Office",
    "Science": "Science",
    "Settings": "Settings",
    "System": "System",
    "Utility": "Accessories",
    "Others": "Others",
}

category_icons = {
    "Multimedia": "applications-multimedia",
    "Development": "applications-development",
    "Education": "applications-education",
    "Games": "applications-games",
    "Graphics": "applications-graphics",
    "Internet": "applications-internet",
    "Office": "applications-office",
    "Science": "applications-science",
    "Settings": "preferences-desktop",
    "System": "applications-system",
    "Accessories": "applications-accessories",
    "Others": "applications-other",
}


def ini_parse(inifile):
    '''
    ConfigParser is a bit slow if you want instant menu generation
    '''
    content = {}
    section = None

    for line in open(inifile):
        line = line.strip()
        if line.startswith('[') and line.endswith(']'):
            section = line.strip('[]')
            content[section] = {}
        elif line.find("=") >= 0 and section:
            key, _, value = line.partition("=")
            content[section][key.strip()] = value.strip()
    return content


def get_gtk_icon_theme(fallback=None):
    XDG_CONFIG_HOME = os.path.join(os.getenv("HOME"), ".config")
    XDG_CONFIG_HOME = os.getenv("XDG_CONFIG_HOME", XDG_CONFIG_HOME)

    gtk3_settings = os.path.join(XDG_CONFIG_HOME, "gtk-3.0", "settings.ini")
    if os.path.exists(gtk3_settings):
        entries = ini_parse(gtk3_settings)
        settings = entries.get("Settings")
        if settings:
            return settings.get("gtk-icon-theme-name", fallback)
    return fallback


def get_args():
    parser = argparse.ArgumentParser(
        description="Python rewrite of the shell version. "
        "A script to generate XDG menu for xmenu.")
    parser.add_argument('-b', '--fallback-icon', default="application-x-executable",
                        help='Fallback icon for apps without icons, default is %(default)s')
    parser.add_argument('-d', '--dump', action='store_true',
                        help='Dump generated menu, do not run xmenu')
    parser.add_argument('-e', '--xdg-de', action='store_true',
                        help='Show apps according to desktop environments')
    parser.add_argument('-G', '--no-genname', action='store_true',
                        help='Do not show generic name of the app')
    parser.add_argument('-i', '--icon-theme', default=None,
                        help='Icon theme for app icons. Default to gtk3 settings.')
    parser.add_argument('-I', '--no-icon', action='store_true',
                        help='Disable icon in xmenu.')
    parser.add_argument('-n', '--dry-run', action='store_true',
                        help='Do not run app, output to stdout')
    parser.add_argument('-s', '--icon-size', type=int, default=24,
                        help='Icon theme for app icons')
    parser.add_argument('-t', '--terminal', default='xterm',
                        help='Terminal emulator to use, default is %(default)s')
    parser.add_argument('-x', '--xmenu-cmd', default='xmenu',
                        help='Xmenu command to use, default is "%(default)s"')
    return parser.parse_args()


def valid_dirs(theme_dir, icon_size):
    # Find directories in an icon theme matching the target size
    indexfile = f"{theme_dir}/index.theme"
    if not os.path.exists(indexfile):
        return []

    # parse the index.theme file
    entries = ini_parse(indexfile)
    for subdir in entries["Icon Theme"]["Directories"].rstrip(",").split(","):
        # "Size" is required
        Size = int(entries[subdir]["Size"])
        # FIXME: scaled icons are ignored for now, sorry HiDPI
        if int(entries[subdir].get("Scale", "1")) != 1:
            continue

        # defaults if they are not specified
        Type = entries[subdir].get("Type", "Threshold")
        MaxSize = int(entries[subdir].get("MaxSize", Size))
        MinSize = int(entries[subdir].get("MinSize", Size))
        Threshold = int(entries[subdir].get("Threshold", 2))

        # match subdirectory sizes based on 'Type'
        if ((Type == "Threshold" and abs(icon_size - Size) <= Threshold) or
                (Type == "Scalable" and MinSize <= icon_size <= MaxSize) or
                (Type == "Fixed" and Size == icon_size)):
            yield f"{theme_dir}/{subdir}"


def find_icon_dirs(data_dirs, icon_theme, icon_size):
    # Find all directories matching the size and containing icons directly
    all_dirs = []
    for datadir in data_dirs:
        for theme in [icon_theme, "hicolor"]:
            all_dirs.extend(valid_dirs(f"{datadir}/icons/{theme}", icon_size))
    all_dirs.append("/usr/share/pixmaps")
    return all_dirs


def find_icon(icon_dirs, icon, fallback):
    # Search for an icon based on its name
    # find any png, svg or xpm icon in available directories
    for dir in icon_dirs:
        for ext in ["png", "svg", "xpm"]:
            icon_file = f"{dir}/{icon}.{ext}"
            if os.path.exists(icon_file):
                return icon_file
    # when the fallback icon is not found, return none instead
    return None if icon == fallback else fallback


def gen_entry(entry, terminal, no_genname):
    Exec = entry.get('Exec')
    Icon = entry.get('Icon')
    Name = entry.get('Name')
    Terminal = entry.get('Terminal')
    GenericName = entry.get('GenericName')
    Categories = entry.get('Categories')

    cmd = Exec.replace('%f', '') \
              .replace('%F', '') \
              .replace('%u', '') \
              .replace('%U', '') \
              .replace('%c', Name) \
              .replace('%k', entry.get('Path', ''))
    if Terminal == "true":
        cmd = f"{terminal} -e {cmd}"

    name = Name
    if GenericName and not no_genname:
        name = f"{name} ({GenericName})"

    return {"categories": Categories, "icon": Icon, "name": name, "cmd": cmd}


def if_show(entry, check_desktops=''):
    if (entry.get('Exec') is None or
            entry.get('NoDisplay') == 'true' or
            entry.get('Hidden') == 'true' or
            entry.get('Type') != "Application"):
        return False

    if entry.get('TryExec'):
        if shutil.which(entry['TryExec']):
            return True
        return False

    if check_desktops:
        if entry.get('NotShowIn'):
            for DE in entry.get('NotShowIn').rstrip(';').split(';'):
                if check_desktops.find(DE) >= 0:
                    return False

        if entry.get('OnlyShowIn'):
            for DE in entry.get('OnlyShowIn').rstrip(';').split(';'):
                if check_desktops.find(DE) >= 0:
                    return True
            return False

    return True


def get_apps(data_dirs):
    apps = {}
    for data_dir in data_dirs:
        app_dir = os.path.join(data_dir, 'applications')
        # Desktop entry files can be in nested directories
        for root, dirs, files in os.walk(app_dir):
            for name in files:
                if name.endswith('.desktop'):
                    app = os.path.join(root, name)
                    app_id = os.path.relpath(app, app_dir).replace('/', '-')

                    # Apps with the same id, choose the first
                    apps[app_id] = app
    return apps.values()


def get_menu_dict(args, icon_dirs=None, fallback=None):
    menu = {k: [] for k in category_icons.keys()}
    for app in get_apps(DATA_DIRS):
        entry = ini_parse(app)["Desktop Entry"]
        check_desktops = XDG_CURRENT_DESKTOP if args.xdg_de else None

        if not if_show(entry, check_desktops):
            continue

        item = gen_entry(entry, args.terminal, args.no_genname)
        if not args.no_icon:
            item['icon'] = find_icon(icon_dirs, item['icon'], fallback)
        else:
            item['icon'] = None

        app_category = "Others"
        if item['categories']:
            for c in item['categories'].rstrip(";").split(";"):
                if c in xdg_categories:
                    app_category = c
                    break
        menu[xdg_categories[app_category]].append(item)

    # remove empty categories
    menu = {k: menu[k] for k in menu if len(menu[k]) > 0}

    return menu


def gen_xmenu(menu, args, icon_dirs=None, fallback=None):
    xdg_menu = ""

    # sort categories
    categories = sorted(list(menu.keys()))
    if 'Others' in categories:
        categories.remove('Others')
        categories.append('Others')

    for category in categories:
        icon = category_icons[category]
        icon = None if args.no_icon else find_icon(icon_dirs, icon, fallback)
        xdg_menu += (f"IMG:{icon}\t" if icon else "") + f"{category}\n"

        for app in sorted(menu[category], key=lambda x: x["name"].lower()):
            app_icon = f"\tIMG:{app['icon']}" if app["icon"] else ""
            xdg_menu += app_icon + "\t{name}\t{cmd}\n".format_map(app)
    return xdg_menu


def main():
    args = get_args()
    if args.icon_theme is None:
        args.icon_theme = get_gtk_icon_theme("hicolor")

    if args.no_icon:
        menu = get_menu_dict(args)
        xdg_menu = gen_xmenu(menu, args)
    else:
        icon_dirs = find_icon_dirs(DATA_DIRS, args.icon_theme, args.icon_size)
        fallback = find_icon(icon_dirs, args.fallback_icon, None)
        menu = get_menu_dict(args, icon_dirs=icon_dirs, fallback=fallback)
        xdg_menu = gen_xmenu(menu, args, icon_dirs=icon_dirs, fallback=fallback)

    if args.dump:
        print(xdg_menu)
        exit(0)

    xmenu_cmd = args.xmenu_cmd.split()
    if args.no_icon:
        xmenu_cmd.append("-i")
    res = run(xmenu_cmd, stdout=PIPE, stderr=DEVNULL, input=xdg_menu.encode())
    if res.returncode == 0:
        output = res.stdout.decode().strip()
        if not args.dry_run and len(output) > 0:
            Popen(shlex.split(output), stdout=DEVNULL, stderr=DEVNULL)
        else:
            print(output)
    else:
        print(f'The following command failed:\n{xmenu_cmd}')
        print(f'Error code: {res.returncode}.\nError:\n{res.stderr}')


if __name__ == "__main__":
    main()
