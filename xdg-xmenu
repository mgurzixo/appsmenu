#!/usr/bin/env python
# Author: Lu Xu <oliver_lew at outlook dot com>
# License: MIT
# References: https://specifications.freedesktop.org/desktop-entry-spec
#             https://specifications.freedesktop.org/icon-theme-spec

import os
import argparse
import shlex
from subprocess import run, PIPE, DEVNULL, Popen


def ini_parse(inifile):
    content = {}
    section = None

    for line in open(inifile):
        if line[0] == '[' and line[-2] == ']':
            section = line[1:-2]
            content[section] = {}
        elif line.find("=") >= 0 and section:
            key, sep, value = line.partition("=")
            content[section][key.strip()] = value.strip()

    return content


def get_gtk_icon_theme(fallback=None):
    XDG_CONFIG_HOME = os.path.join(os.getenv("HOME"), ".config")
    XDG_CONFIG_HOME = os.getenv("XDG_CONFIG_HOME", XDG_CONFIG_HOME)

    gtk3_settings = os.path.join(XDG_CONFIG_HOME, "gtk-3.0", "settings.ini")
    if os.path.exists(gtk3_settings):
        entries = ini_parse(gtk3_settings)
        settings = entries.get("Settings")
        if settings:
            return settings.get("gtk-icon-theme-name", fallback)
    return fallback


def get_args():
    parser = argparse.ArgumentParser(
        description="Python rewrite of the shell version. "
        "A script to generate XDG menu for xmenu.")
    parser.add_argument('-b', '--fallback-icon', default="application-x-executable",
                        help='Fallback icon for apps without icons, default is %(default)s')
    parser.add_argument('-d', '--dump', action='store_true',
                        help='Dump generated menu, do not run xmenu')
    parser.add_argument('-i', '--icon-theme', default=None,
                        help='Icon theme for app icons. If not specified, '
                        'default gtk3 settings file (~/.config/gtk-3.0/settings.ini) '
                        'will be searched for gtk icon theme.')
    parser.add_argument('-I', '--no-icon', action='store_true',
                        help='Disable icon in xmenu.')
    parser.add_argument('-s', '--icon-size', type=int, default=24,
                        help='Icon theme for app icons')
    parser.add_argument('-e', '--xdg-de', action='store_true',
                        help='Show apps according to desktop environments')
    parser.add_argument('-n', '--dry-run', action='store_true',
                        help='Do not run app, output to stdout')
    parser.add_argument('-t', '--terminal', default='xterm',
                        help='Terminal emulator to use, default is %(default)s')
    parser.add_argument('-x', '--xmenu-cmd', default='xmenu',
                        help='Xmenu command to use, default is "%(default)s"')
    return parser.parse_args()


def valid_dirs(theme_dir, icon_size):
    # Find directories in an icon theme matching the target size
    indexfile = f"{theme_dir}/index.theme"
    if not os.path.exists(indexfile):
        return []

    # parse the index.theme file
    entries = ini_parse(indexfile)
    for subdir in entries["Icon Theme"]["Directories"].rstrip(",").split(","):
        # "Size" is required
        Size = int(entries[subdir]["Size"])
        # FIXME: scaled icons are ignored for now, sorry HiDPI
        if int(entries[subdir].get("Scale", "1")) != 1:
            continue

        # defaults if they are not specified
        Type = entries[subdir].get("Type", "Threshold")
        MaxSize = int(entries[subdir].get("MaxSize", Size))
        MinSize = int(entries[subdir].get("MinSize", Size))
        Threshold = int(entries[subdir].get("Threshold", 2))

        # match subdirectory sizes based on 'Type'
        if ((Type == "Threshold" and abs(icon_size - Size) <= Threshold) or
                (Type == "Scalable" and MinSize <= icon_size <= MaxSize) or
                (Type == "Fixed" and Size == icon_size)):
            yield f"{theme_dir}/{subdir}"


def find_icon_dirs(data_dirs, icon_theme, icon_size):
    # Find all directories matching the size and containing icons directly
    all_dirs = []
    for datadir in data_dirs:
        for theme in [icon_theme, "hicolor"]:
            all_dirs.extend(valid_dirs(f"{datadir}/icons/{theme}", icon_size))
    all_dirs.append("/usr/share/pixmaps")
    return all_dirs


def find_icon(icon_dirs, icon, fallback):
    # Search for an icon based on its name
    # find any png, svg or xpm icon in available directories
    for dir in icon_dirs:
        for ext in ["png", "svg", "xpm"]:
            icon_file = f"{dir}/{icon}.{ext}"
            if os.path.exists(icon_file):
                return icon_file
    # when the fallback icon is not found, return none instead
    return None if icon == fallback else fallback


def gen_entry(entry, terminal):
    Exec = entry.get('Exec')
    Icon = entry.get('Icon')
    Name = entry.get('Name')
    Terminal = entry.get('Terminal')
    GenericName = entry.get('GenericName')
    Categories = entry.get('Categories')

    cmd = Exec.replace('%f', '') \
              .replace('%F', '') \
              .replace('%u', '') \
              .replace('%U', '') \
              .replace('%c', Name) \
              .replace('%k', entry.get('Path', ''))
    if Terminal == "true":
        cmd = f"{terminal} -e {cmd}"

    name = f"{Name} ({GenericName})" if GenericName else Name

    return {"categories": Categories, "icon": Icon, "name": name, "cmd": cmd}


def if_show(entry, check_desktops=''):
    if (entry.get('Exec') is None or
            entry.get('NoDisplay') == 'true' or
            entry.get('Hidden') == 'true' or
            entry.get('Type') != "Application"):
        return False

    if entry.get('TryExec'):
        TryExec = entry.get('TryExec')
        if os.path.isabs(TryExec):
            if os.path.exists(TryExec):
                return True
        else:
            for path in os.getenv("PATH").split(":"):
                if os.path.exists(os.path.join(path, TryExec)):
                    return True
        return False

    if check_desktops:
        if entry.get('NotShowIn'):
            for DE in entry.get('NotShowIn').rstrip(';').split(';'):
                if check_desktops.find(DE) >= 0:
                    return False

        if entry.get('OnlyShowIn'):
            for DE in entry.get('OnlyShowIn').rstrip(';').split(';'):
                if check_desktops.find(DE) >= 0:
                    return True
            return False

    return True


def get_apps(data_dirs):
    apps = {}
    for data_dir in data_dirs:
        app_dir = os.path.join(data_dir, 'applications')
        # Desktop entry files can be in nested directories
        for root, dirs, files in os.walk(app_dir):
            for name in files:
                if name.endswith('.desktop'):
                    app = os.path.join(root, name)
                    app_id = os.path.relpath(app, app_dir).replace('/', '-')

                    # Apps with the same id, choose the first
                    apps[app_id] = app
    return apps.values()


def main():
    args = get_args()
    if args.icon_theme is None:
        args.icon_theme = get_gtk_icon_theme("Adwaita")
    current_desktops = os.getenv('XDG_CURRENT_DESKTOP', '')

    # XDG directories
    HOME = os.getenv("HOME")
    XDG_DATA_HOME = os.getenv("XDG_DATA_HOME", f"{HOME}/.local/share")
    XDG_DATA_DIRS = os.getenv("XDG_DATA_DIRS", "/usr/share:/usr/local/share").split(":")
    DATA_DIRS = [*XDG_DATA_DIRS, XDG_DATA_HOME]

    if not args.no_icon:
        icon_dirs = find_icon_dirs(DATA_DIRS, args.icon_theme, args.icon_size)
        fallback = find_icon(icon_dirs, args.fallback_icon, None)

    categories = {
        "AudioVideo": {"name": "Multimedia", "icon": "applications-multimedia"},
        "Audio": {"name": "Multimedia", "icon": "applications-multimedia"},
        "Video": {"name": "Multimedia", "icon": "applications-multimedia"},
        "Development": {"name": "Development", "icon": "applications-development"},
        "Education": {"name": "Education", "icon": "applications-education"},
        "Game": {"name": "Games", "icon": "applications-games"},
        "Graphics": {"name": "Graphics", "icon": "applications-graphics"},
        "Network": {"name": "Internet", "icon": "applications-internet"},
        "Office": {"name": "Office", "icon": "applications-office"},
        "Science": {"name": "Science", "icon": "applications-science"},
        "Settings": {"name": "Settings", "icon": "preferences-desktop"},
        "System": {"name": "System", "icon": "applications-system"},
        "Utility": {"name": "Accessories", "icon": "applications-accessories"},
        "Others": {"name": "Others", "icon": "applications-other"},
    }

    menu = {}
    for app in get_apps(DATA_DIRS):
        app_parser = ini_parse(app)
        entry = app_parser["Desktop Entry"]
        check_desktops = current_desktops if args.xdg_de else None
        if if_show(entry, check_desktops):
            item = gen_entry(entry, args.terminal)
            if not args.no_icon:
                item['icon'] = find_icon(icon_dirs, item['icon'], fallback)
            else:
                item['icon'] = None

            item['category'] = "Others"
            for c in item['categories'].rstrip(";").split(";"):
                if categories.get(c):
                    item['category'] = c

            if menu.get(item["category"]):
                menu[item["category"]].append(item)
            else:
                menu[item["category"]] = [item]

    xdg_menu = ""
    for category in menu:
        menu[category].sort(key=lambda x: x["name"].lower())
        name = categories[category]["name"]
        icon = categories[category]["icon"]
        icon = None if args.no_icon else find_icon(icon_dirs, icon, fallback)
        xdg_menu += (f"IMG:{icon}\t" if icon else "") + f"{name}\n"
        for item in menu[category]:
            field_icon = f"\tIMG:{item['icon']}" if item["icon"] else ""
            xdg_menu += field_icon + "\t{name}\t{cmd}\n".format_map(item)

    if args.dump:
        print(xdg_menu)
        exit(0)

    xmenu_cmd = args.xmenu_cmd.split()
    if args.no_icon:
        xmenu_cmd.append("-i")
    res = run(xmenu_cmd, stdout=PIPE, stderr=DEVNULL, input=xdg_menu.encode())
    if res.returncode == 0:
        output = res.stdout.decode().strip()
        if not args.dry_run and len(output) > 0:
            Popen(shlex.split(output), stdout=DEVNULL, stderr=DEVNULL)
        else:
            print(output)


if __name__ == "__main__":
    main()
